# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

# this has been modified due to incompatibility with python 3.8

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libsimpa
else:
    import _libsimpa

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsimpa.delete_SwigPyIterator

    def value(self):
        return _libsimpa.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libsimpa.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libsimpa.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libsimpa.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libsimpa.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libsimpa.SwigPyIterator_copy(self)

    def next(self):
        return _libsimpa.SwigPyIterator_next(self)

    def __next__(self):
        return _libsimpa.SwigPyIterator___next__(self)

    def previous(self):
        return _libsimpa.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libsimpa.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libsimpa.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libsimpa.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libsimpa.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libsimpa.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libsimpa.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libsimpa.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _libsimpa:
_libsimpa.SwigPyIterator_swigregister(SwigPyIterator)

class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _libsimpa.doubleArray_swiginit(self, _libsimpa.new_doubleArray(nelements))
    __swig_destroy__ = _libsimpa.delete_doubleArray

    def __getitem__(self, index):
        return _libsimpa.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _libsimpa.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _libsimpa.doubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _libsimpa.doubleArray_frompointer(t)

# Register doubleArray in _libsimpa:
_libsimpa.doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _libsimpa.doubleArray_frompointer(t)

class floatArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _libsimpa.floatArray_swiginit(self, _libsimpa.new_floatArray(nelements))
    __swig_destroy__ = _libsimpa.delete_floatArray

    def __getitem__(self, index):
        return _libsimpa.floatArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _libsimpa.floatArray___setitem__(self, index, value)

    def cast(self):
        return _libsimpa.floatArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _libsimpa.floatArray_frompointer(t)

# Register floatArray in _libsimpa:
_libsimpa.floatArray_swigregister(floatArray)

def floatArray_frompointer(t):
    return _libsimpa.floatArray_frompointer(t)

class longArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _libsimpa.longArray_swiginit(self, _libsimpa.new_longArray(nelements))
    __swig_destroy__ = _libsimpa.delete_longArray

    def __getitem__(self, index):
        return _libsimpa.longArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _libsimpa.longArray___setitem__(self, index, value)

    def cast(self):
        return _libsimpa.longArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _libsimpa.longArray_frompointer(t)

# Register longArray in _libsimpa:
_libsimpa.longArray_swigregister(longArray)

def longArray_frompointer(t):
    return _libsimpa.longArray_frompointer(t)

class bintetrafaceArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _libsimpa.bintetrafaceArray_swiginit(self, _libsimpa.new_bintetrafaceArray(nelements))
    __swig_destroy__ = _libsimpa.delete_bintetrafaceArray

    def __getitem__(self, index):
        return _libsimpa.bintetrafaceArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _libsimpa.bintetrafaceArray___setitem__(self, index, value)

    def cast(self):
        return _libsimpa.bintetrafaceArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _libsimpa.bintetrafaceArray_frompointer(t)

# Register bintetrafaceArray in _libsimpa:
_libsimpa.bintetrafaceArray_swigregister(bintetrafaceArray)

def bintetrafaceArray_frompointer(t):
    return _libsimpa.bintetrafaceArray_frompointer(t)

class CCalculsGenerauxThermodynamique(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def c_son(x):
        return _libsimpa.CCalculsGenerauxThermodynamique_c_son(x)

    @staticmethod
    def masse_vol(P, K):
        return _libsimpa.CCalculsGenerauxThermodynamique_masse_vol(P, K)

    @staticmethod
    def Coef_Att_Atmos(F, H, P, K):
        return _libsimpa.CCalculsGenerauxThermodynamique_Coef_Att_Atmos(F, H, P, K)

    def __init__(self):
        _libsimpa.CCalculsGenerauxThermodynamique_swiginit(self, _libsimpa.new_CCalculsGenerauxThermodynamique())
    __swig_destroy__ = _libsimpa.delete_CCalculsGenerauxThermodynamique

# Register CCalculsGenerauxThermodynamique in _libsimpa:
_libsimpa.CCalculsGenerauxThermodynamique_swigregister(CCalculsGenerauxThermodynamique)

def CCalculsGenerauxThermodynamique_c_son(x):
    return _libsimpa.CCalculsGenerauxThermodynamique_c_son(x)

def CCalculsGenerauxThermodynamique_masse_vol(P, K):
    return _libsimpa.CCalculsGenerauxThermodynamique_masse_vol(P, K)

def CCalculsGenerauxThermodynamique_Coef_Att_Atmos(F, H, P, K):
    return _libsimpa.CCalculsGenerauxThermodynamique_Coef_Att_Atmos(F, H, P, K)


def dvec3_to_vec3(v1):
    return _libsimpa.dvec3_to_vec3(v1)

def vec3_to_dvec3(v1):
    return _libsimpa.vec3_to_dvec3(v1)
class vec2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsimpa.vec2_swiginit(self, _libsimpa.new_vec2(*args))

    def __eq__(self, _v):
        return _libsimpa.vec2___eq__(self, _v)

    def __ne__(self, _v):
        return _libsimpa.vec2___ne__(self, _v)

    def __truediv__(self, *args):
        return _libsimpa.vec2___truediv__(self, *args)
    __div__ = __truediv__



    def __add__(self, _v):
        return _libsimpa.vec2___add__(self, _v)

    def __neg__(self):
        return _libsimpa.vec2___neg__(self)

    def __sub__(self, _v):
        return _libsimpa.vec2___sub__(self, _v)

    def __imul__(self, _f):
        return _libsimpa.vec2___imul__(self, _f)

    def __itruediv__(self, *args):
        return _libsimpa.vec2___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, _v):
        return _libsimpa.vec2___iadd__(self, _v)

    def __isub__(self, _v):
        return _libsimpa.vec2___isub__(self, _v)

    def __mul__(self, *args):
        return _libsimpa.vec2___mul__(self, *args)

    def set(self, _x, _y):
        return _libsimpa.vec2_set(self, _x, _y)

    def reset(self):
        return _libsimpa.vec2_reset(self)

    def length(self):
        return _libsimpa.vec2_length(self)

    def normalize(self):
        return _libsimpa.vec2_normalize(self)

    def dot(self, v):
        return _libsimpa.vec2_dot(self, v)

    def compare(self, *args):
        return _libsimpa.vec2_compare(self, *args)

    def closestPointOnLine(self, vA, vB):
        return _libsimpa.vec2_closestPointOnLine(self, vA, vB)

    def closestPointOnSegment(self, vA, vB):
        return _libsimpa.vec2_closestPointOnSegment(self, vA, vB)

    def projectionOnLine(self, vA, vB):
        return _libsimpa.vec2_projectionOnLine(self, vA, vB)

    def lerp(self, u, v, factor):
        return _libsimpa.vec2_lerp(self, u, v, factor)

    def angle(self, *args):
        return _libsimpa.vec2_angle(self, *args)
    __swig_destroy__ = _libsimpa.delete_vec2

# Register vec2 in _libsimpa:
_libsimpa.vec2_swigregister(vec2)
cvar = _libsimpa.cvar
COMMA_PRECISION_DB = cvar.COMMA_PRECISION_DB
COMMA_PRECISION_TIME_S = cvar.COMMA_PRECISION_TIME_S
COMMA_PRECISION_TIME_MS = cvar.COMMA_PRECISION_TIME_MS
COMMA_PRECISION_PERCENT = cvar.COMMA_PRECISION_PERCENT
COMMA_PRECISION_AREA = cvar.COMMA_PRECISION_AREA


def Cross(v1, v2, vout):
    return _libsimpa.Cross(v1, v2, vout)
class vec4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsimpa.vec4_swiginit(self, _libsimpa.new_vec4(*args))

    def __eq__(self, _v):
        return _libsimpa.vec4___eq__(self, _v)

    def __ne__(self, _v):
        return _libsimpa.vec4___ne__(self, _v)

    def __truediv__(self, *args):
        return _libsimpa.vec4___truediv__(self, *args)
    __div__ = __truediv__



    def __add__(self, _v):
        return _libsimpa.vec4___add__(self, _v)

    def __neg__(self):
        return _libsimpa.vec4___neg__(self)

    def __sub__(self, _v):
        return _libsimpa.vec4___sub__(self, _v)

    def __imul__(self, _f):
        return _libsimpa.vec4___imul__(self, _f)

    def __itruediv__(self, *args):
        return _libsimpa.vec4___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, _v):
        return _libsimpa.vec4___iadd__(self, _v)

    def __isub__(self, _v):
        return _libsimpa.vec4___isub__(self, _v)

    def __mul__(self, *args):
        return _libsimpa.vec4___mul__(self, *args)

    def set(self, _x, _y, _z, _w):
        return _libsimpa.vec4_set(self, _x, _y, _z, _w)

    def reset(self):
        return _libsimpa.vec4_reset(self)

    def compare(self, *args):
        return _libsimpa.vec4_compare(self, *args)
    __swig_destroy__ = _libsimpa.delete_vec4

# Register vec4 in _libsimpa:
_libsimpa.vec4_swigregister(vec4)


def Determinant(*args):
    return _libsimpa.Determinant(*args)
class ivec2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsimpa.ivec2_swiginit(self, _libsimpa.new_ivec2(*args))

    def __eq__(self, iv):
        return _libsimpa.ivec2___eq__(self, iv)

    def __ne__(self, iv):
        return _libsimpa.ivec2___ne__(self, iv)

    def __truediv__(self, *args):
        return _libsimpa.ivec2___truediv__(self, *args)
    __div__ = __truediv__



    def __add__(self, iv):
        return _libsimpa.ivec2___add__(self, iv)

    def __neg__(self):
        return _libsimpa.ivec2___neg__(self)

    def __sub__(self, iv):
        return _libsimpa.ivec2___sub__(self, iv)

    def __imul__(self, _i):
        return _libsimpa.ivec2___imul__(self, _i)

    def __itruediv__(self, *args):
        return _libsimpa.ivec2___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, iv):
        return _libsimpa.ivec2___iadd__(self, iv)

    def __isub__(self, iv):
        return _libsimpa.ivec2___isub__(self, iv)

    def __mul__(self, *args):
        return _libsimpa.ivec2___mul__(self, *args)

    def set(self, _a, _b):
        return _libsimpa.ivec2_set(self, _a, _b)

    def reset(self):
        return _libsimpa.ivec2_reset(self)

    def swap(self, *args):
        return _libsimpa.ivec2_swap(self, *args)
    __swig_destroy__ = _libsimpa.delete_ivec2

# Register ivec2 in _libsimpa:
_libsimpa.ivec2_swigregister(ivec2)

class ivec3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsimpa.ivec3_swiginit(self, _libsimpa.new_ivec3(*args))

    def __eq__(self, iv):
        return _libsimpa.ivec3___eq__(self, iv)

    def __ne__(self, iv):
        return _libsimpa.ivec3___ne__(self, iv)

    def __truediv__(self, *args):
        return _libsimpa.ivec3___truediv__(self, *args)
    __div__ = __truediv__



    def __add__(self, iv):
        return _libsimpa.ivec3___add__(self, iv)

    def __neg__(self):
        return _libsimpa.ivec3___neg__(self)

    def __sub__(self, iv):
        return _libsimpa.ivec3___sub__(self, iv)

    def __imul__(self, _i):
        return _libsimpa.ivec3___imul__(self, _i)

    def __itruediv__(self, *args):
        return _libsimpa.ivec3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, iv):
        return _libsimpa.ivec3___iadd__(self, iv)

    def __isub__(self, iv):
        return _libsimpa.ivec3___isub__(self, iv)

    def __mul__(self, *args):
        return _libsimpa.ivec3___mul__(self, *args)

    def set(self, *args):
        return _libsimpa.ivec3_set(self, *args)

    def reset(self):
        return _libsimpa.ivec3_reset(self)

    def swap(self, *args):
        return _libsimpa.ivec3_swap(self, *args)

    def sideVertices(self, idside):
        return _libsimpa.ivec3_sideVertices(self, idside)

    def __getitem__(self, i):
        return _libsimpa.ivec3___getitem__(self, i)

    def __len__(self):
        return _libsimpa.ivec3___len__(self)

    def __repr__(self):
      return "[%s,%s,%s]" % (self[0],self[1],self[2])

    __swig_destroy__ = _libsimpa.delete_ivec3

# Register ivec3 in _libsimpa:
_libsimpa.ivec3_swigregister(ivec3)

class ivec4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsimpa.ivec4_swiginit(self, _libsimpa.new_ivec4(*args))

    def __eq__(self, iv):
        return _libsimpa.ivec4___eq__(self, iv)

    def __ne__(self, iv):
        return _libsimpa.ivec4___ne__(self, iv)

    def __truediv__(self, *args):
        return _libsimpa.ivec4___truediv__(self, *args)
    __div__ = __truediv__



    def __add__(self, iv):
        return _libsimpa.ivec4___add__(self, iv)

    def __neg__(self):
        return _libsimpa.ivec4___neg__(self)

    def __sub__(self, iv):
        return _libsimpa.ivec4___sub__(self, iv)

    def __imul__(self, _i):
        return _libsimpa.ivec4___imul__(self, _i)

    def __itruediv__(self, *args):
        return _libsimpa.ivec4___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, iv):
        return _libsimpa.ivec4___iadd__(self, iv)

    def __isub__(self, iv):
        return _libsimpa.ivec4___isub__(self, iv)

    def __mul__(self, *args):
        return _libsimpa.ivec4___mul__(self, *args)

    def Index(self, _i):
        return _libsimpa.ivec4_Index(self, _i)

    def set(self, _a, _b, _c, _d):
        return _libsimpa.ivec4_set(self, _a, _b, _c, _d)

    def reset(self):
        return _libsimpa.ivec4_reset(self)

    def swap(self, *args):
        return _libsimpa.ivec4_swap(self, *args)

    def __getitem__(self, i):
        return _libsimpa.ivec4___getitem__(self, i)

    def __len__(self):
        return _libsimpa.ivec4___len__(self)
    __swig_destroy__ = _libsimpa.delete_ivec4

# Register ivec4 in _libsimpa:
_libsimpa.ivec4_swigregister(ivec4)


def CalcTetraVolume(A, B, C, D):
    return _libsimpa.CalcTetraVolume(A, B, C, D)

def GetGTetra(A, B, C, D):
    return _libsimpa.GetGTetra(A, B, C, D)

def DotInTetra(dotTest, v1, v2, v3, v4):
    return _libsimpa.DotInTetra(dotTest, v1, v2, v3, v4)

def LineLineIntersect(p1, p2, p3, p4, pa, pb, mua, mub):
    return _libsimpa.LineLineIntersect(p1, p2, p3, p4, pa, pb, mua, mub)

def ClosestDistanceBetweenDotAndTriangle(va, vb, vc, P, pfSParam, pfTParam):
    return _libsimpa.ClosestDistanceBetweenDotAndTriangle(va, vb, vc, P, pfSParam, pfTParam)
class t_pos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    v = property(_libsimpa.t_pos_v_get, _libsimpa.t_pos_v_set)

    def __init__(self, *args):
        _libsimpa.t_pos_swiginit(self, _libsimpa.new_t_pos(*args))

    def __eq__(self, _v):
        return _libsimpa.t_pos___eq__(self, _v)

    def Index(self, _i):
        return _libsimpa.t_pos_Index(self, _i)

    def __getitem__(self, i):
        return _libsimpa.t_pos___getitem__(self, i)

    def __len__(self):
        return _libsimpa.t_pos___len__(self)
    __swig_destroy__ = _libsimpa.delete_t_pos

# Register t_pos in _libsimpa:
_libsimpa.t_pos_swigregister(t_pos)

class ioFace(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, _f):
        return _libsimpa.ioFace___eq__(self, _f)

    def __init__(self, *args):
        _libsimpa.ioFace_swiginit(self, _libsimpa.new_ioFace(*args))
    a = property(_libsimpa.ioFace_a_get, _libsimpa.ioFace_a_set)
    b = property(_libsimpa.ioFace_b_get, _libsimpa.ioFace_b_set)
    c = property(_libsimpa.ioFace_c_get, _libsimpa.ioFace_c_set)
    idMat = property(_libsimpa.ioFace_idMat_get, _libsimpa.ioFace_idMat_set)
    idRs = property(_libsimpa.ioFace_idRs_get, _libsimpa.ioFace_idRs_set)
    idEn = property(_libsimpa.ioFace_idEn_get, _libsimpa.ioFace_idEn_set)
    __swig_destroy__ = _libsimpa.delete_ioFace

# Register ioFace in _libsimpa:
_libsimpa.ioFace_swigregister(ioFace)

class ioModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    faces = property(_libsimpa.ioModel_faces_get, _libsimpa.ioModel_faces_set)
    vertices = property(_libsimpa.ioModel_vertices_get, _libsimpa.ioModel_vertices_set)

    def __init__(self):
        _libsimpa.ioModel_swiginit(self, _libsimpa.new_ioModel())
    __swig_destroy__ = _libsimpa.delete_ioModel

# Register ioModel in _libsimpa:
_libsimpa.ioModel_swigregister(ioModel)

class CformatBIN(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libsimpa.CformatBIN_swiginit(self, _libsimpa.new_CformatBIN())
    __swig_destroy__ = _libsimpa.delete_CformatBIN

    def ImportBIN(self, modelImport, strFileName):
        return _libsimpa.CformatBIN_ImportBIN(self, modelImport, strFileName)

    def ExportBIN(self, strFileName, modelExport):
        return _libsimpa.CformatBIN_ExportBIN(self, strFileName, modelExport)

    def GetSurfAire(self, model, indiceface):
        return _libsimpa.CformatBIN_GetSurfAire(self, model, indiceface)

# Register CformatBIN in _libsimpa:
_libsimpa.CformatBIN_swigregister(CformatBIN)

class t_binNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsimpa.t_binNode_swiginit(self, _libsimpa.new_t_binNode(*args))
    node = property(_libsimpa.t_binNode_node_get, _libsimpa.t_binNode_node_set)

    def __eq__(self, _f):
        return _libsimpa.t_binNode___eq__(self, _f)

    def Index(self, _i):
        return _libsimpa.t_binNode_Index(self, _i)

    def __getitem__(self, i):
        return _libsimpa.t_binNode___getitem__(self, i)

    def __len__(self):
        return _libsimpa.t_binNode___len__(self)
    __swig_destroy__ = _libsimpa.delete_t_binNode

# Register t_binNode in _libsimpa:
_libsimpa.t_binNode_swigregister(t_binNode)

class bintetraface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsimpa.bintetraface_swiginit(self, _libsimpa.new_bintetraface(*args))
    vertices = property(_libsimpa.bintetraface_vertices_get, _libsimpa.bintetraface_vertices_set)
    marker = property(_libsimpa.bintetraface_marker_get, _libsimpa.bintetraface_marker_set)
    neighbor = property(_libsimpa.bintetraface_neighbor_get, _libsimpa.bintetraface_neighbor_set)

    def __eq__(self, _f):
        return _libsimpa.bintetraface___eq__(self, _f)
    __swig_destroy__ = _libsimpa.delete_bintetraface

# Register bintetraface in _libsimpa:
_libsimpa.bintetraface_swigregister(bintetraface)

class bintetrahedre(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsimpa.bintetrahedre_swiginit(self, _libsimpa.new_bintetrahedre(*args))
    vertices = property(_libsimpa.bintetrahedre_vertices_get, _libsimpa.bintetrahedre_vertices_set)
    idVolume = property(_libsimpa.bintetrahedre_idVolume_get, _libsimpa.bintetrahedre_idVolume_set)
    tetrafaces = property(_libsimpa.bintetrahedre_tetrafaces_get, _libsimpa.bintetrahedre_tetrafaces_set)

    def __eq__(self, _f):
        return _libsimpa.bintetrahedre___eq__(self, _f)

    def getFace(self, i):
        return _libsimpa.bintetrahedre_getFace(self, i)

    def setFace(self, i, face):
        return _libsimpa.bintetrahedre_setFace(self, i, face)
    __swig_destroy__ = _libsimpa.delete_bintetrahedre

# Register bintetrahedre in _libsimpa:
_libsimpa.bintetrahedre_swigregister(bintetrahedre)

class trimeshmodel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tetrahedres = property(_libsimpa.trimeshmodel_tetrahedres_get, _libsimpa.trimeshmodel_tetrahedres_set)
    nodes = property(_libsimpa.trimeshmodel_nodes_get, _libsimpa.trimeshmodel_nodes_set)

    def __init__(self):
        _libsimpa.trimeshmodel_swiginit(self, _libsimpa.new_trimeshmodel())
    __swig_destroy__ = _libsimpa.delete_trimeshmodel

# Register trimeshmodel in _libsimpa:
_libsimpa.trimeshmodel_swigregister(trimeshmodel)

class CMBIN(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libsimpa.CMBIN_swiginit(self, _libsimpa.new_CMBIN())
    __swig_destroy__ = _libsimpa.delete_CMBIN

    def ImportBIN(self, strFileName, tabTetra, tabNodes, sizeTetra, sizeNodes):
        return _libsimpa.CMBIN_ImportBIN(self, strFileName, tabTetra, tabNodes, sizeTetra, sizeNodes)

    def ExportBIN(self, strFileName, tabTetra, tabNodes, sizeTetra, sizeNodes):
        return _libsimpa.CMBIN_ExportBIN(self, strFileName, tabTetra, tabNodes, sizeTetra, sizeNodes)

    def LoadMesh(self, strFileName):
        return _libsimpa.CMBIN_LoadMesh(self, strFileName)

    def SaveMesh(self, strFileName, trimesh):
        return _libsimpa.CMBIN_SaveMesh(self, strFileName, trimesh)

    @staticmethod
    def ComputeVolume(trimesh):
        return _libsimpa.CMBIN_ComputeVolume(trimesh)

# Register CMBIN in _libsimpa:
_libsimpa.CMBIN_swigregister(CMBIN)

def CMBIN_ComputeVolume(trimesh):
    return _libsimpa.CMBIN_ComputeVolume(trimesh)

class t_region(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    regionIndex = property(_libsimpa.t_region_regionIndex_get, _libsimpa.t_region_regionIndex_set)
    dotInRegion = property(_libsimpa.t_region_dotInRegion_get, _libsimpa.t_region_dotInRegion_set)
    regionRefinement = property(_libsimpa.t_region_regionRefinement_get, _libsimpa.t_region_regionRefinement_set)

    def __init__(self):
        _libsimpa.t_region_swiginit(self, _libsimpa.new_t_region())
    __swig_destroy__ = _libsimpa.delete_t_region

# Register t_region in _libsimpa:
_libsimpa.t_region_swigregister(t_region)

class t_face(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsimpa.t_face_swiginit(self, _libsimpa.new_t_face(*args))

    def __eq__(self, _f):
        return _libsimpa.t_face___eq__(self, _f)
    indicesSommets = property(_libsimpa.t_face_indicesSommets_get, _libsimpa.t_face_indicesSommets_set)
    faceIndex = property(_libsimpa.t_face_faceIndex_get, _libsimpa.t_face_faceIndex_set)
    __swig_destroy__ = _libsimpa.delete_t_face

# Register t_face in _libsimpa:
_libsimpa.t_face_swigregister(t_face)

class t_model(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    saveFaceIndex = property(_libsimpa.t_model_saveFaceIndex_get, _libsimpa.t_model_saveFaceIndex_set)
    userDefinedFaces = property(_libsimpa.t_model_userDefinedFaces_get, _libsimpa.t_model_userDefinedFaces_set)
    modelFaces = property(_libsimpa.t_model_modelFaces_get, _libsimpa.t_model_modelFaces_set)
    modelVertices = property(_libsimpa.t_model_modelVertices_get, _libsimpa.t_model_modelVertices_set)
    modelRegions = property(_libsimpa.t_model_modelRegions_get, _libsimpa.t_model_modelRegions_set)

    def __init__(self):
        _libsimpa.t_model_swiginit(self, _libsimpa.new_t_model())
    __swig_destroy__ = _libsimpa.delete_t_model

# Register t_model in _libsimpa:
_libsimpa.t_model_swigregister(t_model)

class CPoly(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libsimpa.CPoly_swiginit(self, _libsimpa.new_CPoly())

    def ExportPOLY(self, sceneconst, mfilename):
        return _libsimpa.CPoly_ExportPOLY(self, sceneconst, mfilename)

    def ImportPOLY(self, sceneconst, mfilename):
        return _libsimpa.CPoly_ImportPOLY(self, sceneconst, mfilename)
    __swig_destroy__ = _libsimpa.delete_CPoly

# Register CPoly in _libsimpa:
_libsimpa.CPoly_swigregister(CPoly)

GABE_OBJECTTYPE_USER_DEFINED = _libsimpa.GABE_OBJECTTYPE_USER_DEFINED
GABE_OBJECTTYPE_FLOAT = _libsimpa.GABE_OBJECTTYPE_FLOAT
GABE_OBJECTTYPE_INT = _libsimpa.GABE_OBJECTTYPE_INT
GABE_OBJECTTYPE_SHORTSTRING = _libsimpa.GABE_OBJECTTYPE_SHORTSTRING
class GABE_Object(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsimpa.delete_GABE_Object

    def GetLabel(self):
        return _libsimpa.GABE_Object_GetLabel(self)

    def GetStringEquiv(self, numRow):
        return _libsimpa.GABE_Object_GetStringEquiv(self, numRow)

    def SetLabel(self, _label):
        return _libsimpa.GABE_Object_SetLabel(self, _label)

    def GetLength(self):
        return _libsimpa.GABE_Object_GetLength(self)

    def GetFirstChar(self):
        return _libsimpa.GABE_Object_GetFirstChar(self)

    def GetHeaderLength(self):
        return _libsimpa.GABE_Object_GetHeaderLength(self)

    def GetHeaderFirstChar(self):
        return _libsimpa.GABE_Object_GetHeaderFirstChar(self)

    def GetObjectType(self):
        return _libsimpa.GABE_Object_GetObjectType(self)

    def GetSize(self):
        return _libsimpa.GABE_Object_GetSize(self)

    def GetCopy(self):
        return _libsimpa.GABE_Object_GetCopy(self)

    def ReadFile(self, fs):
        return _libsimpa.GABE_Object_ReadFile(self, fs)

    def WriteFile(self, fs):
        return _libsimpa.GABE_Object_WriteFile(self, fs)

# Register GABE_Object in _libsimpa:
_libsimpa.GABE_Object_swigregister(GABE_Object)
STRING_LABEL_LENGTH = cvar.STRING_LABEL_LENGTH
STRING_NUMBER_BUFFER = cvar.STRING_NUMBER_BUFFER

class t_NoStruct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libsimpa.t_NoStruct_swiginit(self, _libsimpa.new_t_NoStruct())
    __swig_destroy__ = _libsimpa.delete_t_NoStruct

# Register t_NoStruct in _libsimpa:
_libsimpa.t_NoStruct_swigregister(t_NoStruct)

class t_HeaderFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    numOfDigits = property(_libsimpa.t_HeaderFloat_numOfDigits_get, _libsimpa.t_HeaderFloat_numOfDigits_set)

    def __init__(self):
        _libsimpa.t_HeaderFloat_swiginit(self, _libsimpa.new_t_HeaderFloat())
    __swig_destroy__ = _libsimpa.delete_t_HeaderFloat

# Register t_HeaderFloat in _libsimpa:
_libsimpa.t_HeaderFloat_swigregister(t_HeaderFloat)

class GABE_Data_Float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def WriteFile(self, fs):
        return _libsimpa.GABE_Data_Float_WriteFile(self, fs)

    def __init__(self, *args):
        _libsimpa.GABE_Data_Float_swiginit(self, _libsimpa.new_GABE_Data_Float(*args))

    def GetStringEquiv(self, numRow):
        return _libsimpa.GABE_Data_Float_GetStringEquiv(self, numRow)

    def ReadFile(self, fs):
        return _libsimpa.GABE_Data_Float_ReadFile(self, fs)

    def GetCopy(self):
        return _libsimpa.GABE_Data_Float_GetCopy(self)
    __swig_destroy__ = _libsimpa.delete_GABE_Data_Float

# Register GABE_Data_Float in _libsimpa:
_libsimpa.GABE_Data_Float_swigregister(GABE_Data_Float)

class t_StringShort(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    strData = property(_libsimpa.t_StringShort_strData_get, _libsimpa.t_StringShort_strData_set)

    def __init__(self):
        _libsimpa.t_StringShort_swiginit(self, _libsimpa.new_t_StringShort())
    __swig_destroy__ = _libsimpa.delete_t_StringShort

# Register t_StringShort in _libsimpa:
_libsimpa.t_StringShort_swigregister(t_StringShort)

class GABE_Data_ShortString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsimpa.GABE_Data_ShortString_swiginit(self, _libsimpa.new_GABE_Data_ShortString(*args))

    def SetString(self, numRow, strToCopy):
        return _libsimpa.GABE_Data_ShortString_SetString(self, numRow, strToCopy)

    def GetCopy(self):
        return _libsimpa.GABE_Data_ShortString_GetCopy(self)

    def WriteFile(self, fs):
        return _libsimpa.GABE_Data_ShortString_WriteFile(self, fs)

    def ReadFile(self, fs):
        return _libsimpa.GABE_Data_ShortString_ReadFile(self, fs)

    def GetStringEquiv(self, numRow):
        return _libsimpa.GABE_Data_ShortString_GetStringEquiv(self, numRow)
    __swig_destroy__ = _libsimpa.delete_GABE_Data_ShortString

# Register GABE_Data_ShortString in _libsimpa:
_libsimpa.GABE_Data_ShortString_swigregister(GABE_Data_ShortString)

class GABE_Data_Integer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsimpa.GABE_Data_Integer_swiginit(self, _libsimpa.new_GABE_Data_Integer(*args))

    def GetStringEquiv(self, numRow):
        return _libsimpa.GABE_Data_Integer_GetStringEquiv(self, numRow)

    def ReadFile(self, fs):
        return _libsimpa.GABE_Data_Integer_ReadFile(self, fs)

    def WriteFile(self, fs):
        return _libsimpa.GABE_Data_Integer_WriteFile(self, fs)

    def GetCopy(self):
        return _libsimpa.GABE_Data_Integer_GetCopy(self)
    __swig_destroy__ = _libsimpa.delete_GABE_Data_Integer

# Register GABE_Data_Integer in _libsimpa:
_libsimpa.GABE_Data_Integer_swigregister(GABE_Data_Integer)

class GABE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsimpa.GABE_swiginit(self, _libsimpa.new_GABE(*args))
    __swig_destroy__ = _libsimpa.delete_GABE

    def Redim(self, colsCount):
        return _libsimpa.GABE_Redim(self, colsCount)

    def SetCol(self, *args):
        return _libsimpa.GABE_SetCol(self, *args)

    def GetConstCol(self, numCol):
        return _libsimpa.GABE_GetConstCol(self, numCol)

    def GetCol(self, *args):
        return _libsimpa.GABE_GetCol(self, *args)

    def GetCols(self):
        return _libsimpa.GABE_GetCols(self)

    def Load(self, strFileName):
        return _libsimpa.GABE_Load(self, strFileName)

    def Save(self, strFileName):
        return _libsimpa.GABE_Save(self, strFileName)

    def LockData(self):
        return _libsimpa.GABE_LockData(self)

    def UnlockData(self):
        return _libsimpa.GABE_UnlockData(self)

    def IsReadOnly(self):
        return _libsimpa.GABE_IsReadOnly(self)

# Register GABE in _libsimpa:
_libsimpa.GABE_swigregister(GABE)

class Gabe_rw(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsimpa.Gabe_rw_swiginit(self, _libsimpa.new_Gabe_rw(*args))

    def Load(self, fileName):
        return _libsimpa.Gabe_rw_Load(self, fileName)

    def Save(self, fileName):
        _fileName = fileName.decode('utf-8')
        return _libsimpa.Gabe_rw_Save(self, _fileName)

    def AppendStrCol(self, coldata, coltitle):
        return _libsimpa.Gabe_rw_AppendStrCol(self, coldata, coltitle)

    def AppendIntCol(self, coldata, coltitle):
        return _libsimpa.Gabe_rw_AppendIntCol(self, coldata, coltitle)

    def AppendFloatCol(self, coldata, coltitle, precision=12):
        return _libsimpa.Gabe_rw_AppendFloatCol(self, coldata, coltitle, precision)

    def GetColTitle(self, idcol):
        return _libsimpa.Gabe_rw_GetColTitle(self, idcol)

    def GetTabTypes(self):
        return _libsimpa.Gabe_rw_GetTabTypes(self)

    def IsReadOnly(self):
        return _libsimpa.Gabe_rw_IsReadOnly(self)

    def SetReadOnly(self, ReadOnly=True):
        return _libsimpa.Gabe_rw_SetReadOnly(self, ReadOnly)

    def size(self):
        return _libsimpa.Gabe_rw_size(self)

    def Index(self, indicecol):
        return _libsimpa.Gabe_rw_Index(self, indicecol)

    def ReadColStr(self, idcol):
        return _libsimpa.Gabe_rw_ReadColStr(self, idcol)

    def ReadColInt(self, idcol):
        return _libsimpa.Gabe_rw_ReadColInt(self, idcol)

    def ReadColFloat(self, idcol):
        return _libsimpa.Gabe_rw_ReadColFloat(self, idcol)

    def __len__(self):
        return _libsimpa.Gabe_rw___len__(self)

    def __getitem__(self, i):
        return _libsimpa.Gabe_rw___getitem__(self, i)
    __swig_destroy__ = _libsimpa.delete_Gabe_rw

# Register Gabe_rw in _libsimpa:
_libsimpa.Gabe_rw_swigregister(Gabe_rw)


def impl_vectors():
    return _libsimpa.impl_vectors()
class progressOperation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parentOperation, sonEstimation=1):
        _libsimpa.progressOperation_swiginit(self, _libsimpa.new_progressOperation(parentOperation, sonEstimation))
    __swig_destroy__ = _libsimpa.delete_progressOperation

    def GetState(self, thisLvlProg):
        return _libsimpa.progressOperation_GetState(self, thisLvlProg)

    def Next(self):
        return _libsimpa.progressOperation_Next(self)

# Register progressOperation in _libsimpa:
_libsimpa.progressOperation_swigregister(progressOperation)

class progressionInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, firstLevelEstimation):
        _libsimpa.progressionInfo_swiginit(self, _libsimpa.new_progressionInfo(firstLevelEstimation))
    __swig_destroy__ = _libsimpa.delete_progressionInfo

    def GetMainOperation(self):
        return _libsimpa.progressionInfo_GetMainOperation(self)

    def OutputCurrentProgression(self):
        return _libsimpa.progressionInfo_OutputCurrentProgression(self)

    def GetCurrentProgression(self):
        return _libsimpa.progressionInfo_GetCurrentProgression(self)

# Register progressionInfo in _libsimpa:
_libsimpa.progressionInfo_swigregister(progressionInfo)

class t_curve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    A = property(_libsimpa.t_curve_A_get, _libsimpa.t_curve_A_set)
    B = property(_libsimpa.t_curve_B_get, _libsimpa.t_curve_B_set)

    def __init__(self):
        _libsimpa.t_curve_swiginit(self, _libsimpa.new_t_curve())
    __swig_destroy__ = _libsimpa.delete_t_curve

# Register t_curve in _libsimpa:
_libsimpa.t_curve_swigregister(t_curve)

class rsurf_data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libsimpa.rsurf_data_swiginit(self, _libsimpa.new_rsurf_data())
    __swig_destroy__ = _libsimpa.delete_rsurf_data

    def SetRsBinData(self, rsData):
        return _libsimpa.rsurf_data_SetRsBinData(self, rsData)

    def GetRsCount(self):
        return _libsimpa.rsurf_data_GetRsCount(self)

    def Make(self, *args):
        return _libsimpa.rsurf_data_Make(self, *args)

    def MakeRs(self, rsIndex, nbfacesconst, rs_name, xmlid):
        return _libsimpa.rsurf_data_MakeRs(self, rsIndex, nbfacesconst, rs_name, xmlid)

    def SetNodeValue(self, nodeIndex, x, y, z):
        return _libsimpa.rsurf_data_SetNodeValue(self, nodeIndex, x, y, z)

    def SetFaceInfo(self, rsIndex, faceIndex, vertexA, vertexB, vertexC, recordCount):
        return _libsimpa.rsurf_data_SetFaceInfo(self, rsIndex, faceIndex, vertexA, vertexB, vertexC, recordCount)

    def SetFaceEnergy(self, rsIndex, faceIndex, recordIndex, idstep, energy):
        return _libsimpa.rsurf_data_SetFaceEnergy(self, rsIndex, faceIndex, recordIndex, idstep, energy)

    def GetNodesCount(self):
        return _libsimpa.rsurf_data_GetNodesCount(self)

    def GetTimeStepCount(self):
        return _libsimpa.rsurf_data_GetTimeStepCount(self)

    def GetTimeStep(self):
        return _libsimpa.rsurf_data_GetTimeStep(self)

    def getRecordType(self):
        return _libsimpa.rsurf_data_getRecordType(self)

    def GetNodePositionValue(self, nodeIndex):
        return _libsimpa.rsurf_data_GetNodePositionValue(self, nodeIndex)

    def GetRsFaceCount(self, rsIndex):
        return _libsimpa.rsurf_data_GetRsFaceCount(self, rsIndex)

    def GetRsName(self, rsIndex):
        return _libsimpa.rsurf_data_GetRsName(self, rsIndex)

    def GetRsXmlId(self, rsIndex):
        return _libsimpa.rsurf_data_GetRsXmlId(self, rsIndex)

    def GetFaceVertices(self, rsIndex, faceIndex):
        return _libsimpa.rsurf_data_GetFaceVertices(self, rsIndex, faceIndex)

    def GetFaceRecordCount(self, rsIndex, faceIndex):
        return _libsimpa.rsurf_data_GetFaceRecordCount(self, rsIndex, faceIndex)

    def ComputeFaceArea(self, rsIndex, faceIndex):
        return _libsimpa.rsurf_data_ComputeFaceArea(self, rsIndex, faceIndex)

    def GetFaceEnergy(self, rsIndex, faceIndex, recordIndex):
        return _libsimpa.rsurf_data_GetFaceEnergy(self, rsIndex, faceIndex, recordIndex)

    def GetFaceTimeStep(self, rsIndex, faceIndex, recordIndex):
        return _libsimpa.rsurf_data_GetFaceTimeStep(self, rsIndex, faceIndex, recordIndex)

    def GetFaceSumEnergy(self, rsIndex, faceIndex):
        return _libsimpa.rsurf_data_GetFaceSumEnergy(self, rsIndex, faceIndex)

# Register rsurf_data in _libsimpa:
_libsimpa.rsurf_data_swigregister(rsurf_data)

class rsurf_io(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libsimpa.rsurf_io_swiginit(self, _libsimpa.new_rsurf_io())

    @staticmethod
    def Load(fileName, data):
        return _libsimpa.rsurf_io_Load(fileName, data)

    @staticmethod
    def Save(fileName, data):
        return _libsimpa.rsurf_io_Save(fileName, data)
    __swig_destroy__ = _libsimpa.delete_rsurf_io

# Register rsurf_io in _libsimpa:
_libsimpa.rsurf_io_swigregister(rsurf_io)

def rsurf_io_Load(fileName, data):
    return _libsimpa.rsurf_io_Load(fileName, data)

def rsurf_io_Save(fileName, data):
    return _libsimpa.rsurf_io_Save(fileName, data)

class rsurf_iso_contouring(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, data, rsIndex):
        _libsimpa.rsurf_iso_contouring_swiginit(self, _libsimpa.new_rsurf_iso_contouring(data, rsIndex))
    __swig_destroy__ = _libsimpa.delete_rsurf_iso_contouring

    def GetMinMax(self, min, max):
        return _libsimpa.rsurf_iso_contouring_GetMinMax(self, min, max)

    def SmoothGrid(self, smoothcount):
        return _libsimpa.rsurf_iso_contouring_SmoothGrid(self, smoothcount)

    def GetIsoLevelCurves(self, isolvl, curvlst):
        return _libsimpa.rsurf_iso_contouring_GetIsoLevelCurves(self, isolvl, curvlst)

# Register rsurf_iso_contouring in _libsimpa:
_libsimpa.rsurf_iso_contouring_swigregister(rsurf_iso_contouring)

class ParticuleIO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libsimpa.ParticuleIO_swiginit(self, _libsimpa.new_ParticuleIO())

    def Close(self):
        return _libsimpa.ParticuleIO_Close(self)

    def IsOpenAndReadyForWrite(self):
        return _libsimpa.ParticuleIO_IsOpenAndReadyForWrite(self)

    def IsOpenAndReadyForRead(self):
        return _libsimpa.ParticuleIO_IsOpenAndReadyForRead(self)
    __swig_destroy__ = _libsimpa.delete_ParticuleIO

    def OpenForWrite(self, fileName):
        return _libsimpa.ParticuleIO_OpenForWrite(self, fileName)

    def SetHeaderData(self, timeStep):
        return _libsimpa.ParticuleIO_SetHeaderData(self, timeStep)

    def NewParticle(self, firsttimestep):
        return _libsimpa.ParticuleIO_NewParticle(self, firsttimestep)

    def NewPositionParticle(self, x, y, z, energy):
        return _libsimpa.ParticuleIO_NewPositionParticle(self, x, y, z, energy)

    def OpenForRead(self, fileName):
        return _libsimpa.ParticuleIO_OpenForRead(self, fileName)

    def GetHeaderData(self, timeStep, nbParticles, nbStepMax):
        return _libsimpa.ParticuleIO_GetHeaderData(self, timeStep, nbParticles, nbStepMax)

    def ResetRead(self):
        return _libsimpa.ParticuleIO_ResetRead(self)

    def NextParticle(self, firstTimeStep, nbTimeStep):
        return _libsimpa.ParticuleIO_NextParticle(self, firstTimeStep, nbTimeStep)

    def NextTimeStep(self, x, y, z, energy):
        return _libsimpa.ParticuleIO_NextTimeStep(self, x, y, z, energy)

# Register ParticuleIO in _libsimpa:
_libsimpa.ParticuleIO_swigregister(ParticuleIO)

class VolumesSplitter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libsimpa.VolumesSplitter_swiginit(self, _libsimpa.new_VolumesSplitter())
    __swig_destroy__ = _libsimpa.delete_VolumesSplitter

    def LoadDomain(self, model, tetramodel):
        return _libsimpa.VolumesSplitter_LoadDomain(self, model, tetramodel)

    def GetVolumes(self):
        return _libsimpa.VolumesSplitter_GetVolumes(self)

    def GetVolumeInformation(self, idel, volumeXmlId, volume, faceIds, volNeigh):
        return _libsimpa.VolumesSplitter_GetVolumeInformation(self, idel, volumeXmlId, volume, faceIds, volNeigh)

    def GetVolumeXmlId(self, idel):
        return _libsimpa.VolumesSplitter_GetVolumeXmlId(self, idel)

    def GetInternalFaces(self, internalFaceIds, volumeXmlIdFilter=-1):
        return _libsimpa.VolumesSplitter_GetInternalFaces(self, internalFaceIds, volumeXmlIdFilter)

    def GetTetraByPosition(self, tetramodel, x, y, z, reloadTetraModel=False):
        return _libsimpa.VolumesSplitter_GetTetraByPosition(self, tetramodel, x, y, z, reloadTetraModel)

# Register VolumesSplitter in _libsimpa:
_libsimpa.VolumesSplitter_swigregister(VolumesSplitter)

class SurfaceMerging(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _libsimpa.SurfaceMerging_swiginit(self, _libsimpa.new_SurfaceMerging())
    __swig_destroy__ = _libsimpa.delete_SurfaceMerging

    def LoadGroups(self, model):
        return _libsimpa.SurfaceMerging_LoadGroups(self, model)

    def GetGroups(self):
        return _libsimpa.SurfaceMerging_GetGroups(self)

    def GetGroupInformation(self, idel, faceIds):
        return _libsimpa.SurfaceMerging_GetGroupInformation(self, idel, faceIds)

    def SavePolyToPolyFile(self, strFileName):
        return _libsimpa.SurfaceMerging_SavePolyToPolyFile(self, strFileName)

# Register SurfaceMerging in _libsimpa:
_libsimpa.SurfaceMerging_swigregister(SurfaceMerging)

class vec3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsimpa.vec3_swiginit(self, _libsimpa.new_vec3(*args))

    def __eq__(self, _v):
        return _libsimpa.vec3___eq__(self, _v)

    def __ne__(self, _v):
        return _libsimpa.vec3___ne__(self, _v)

    def __truediv__(self, *args):
        return _libsimpa.vec3___truediv__(self, *args)
    __div__ = __truediv__



    def __add__(self, _v):
        return _libsimpa.vec3___add__(self, _v)

    def __neg__(self):
        return _libsimpa.vec3___neg__(self)

    def __sub__(self, _v):
        return _libsimpa.vec3___sub__(self, _v)

    def __imul__(self, _f):
        return _libsimpa.vec3___imul__(self, _f)

    def __itruediv__(self, *args):
        return _libsimpa.vec3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, _v):
        return _libsimpa.vec3___iadd__(self, _v)

    def __isub__(self, _v):
        return _libsimpa.vec3___isub__(self, _v)

    def __mul__(self, *args):
        return _libsimpa.vec3___mul__(self, *args)

    def copyTo(self, arr):
        return _libsimpa.vec3_copyTo(self, arr)

    def Index(self, _i):
        return _libsimpa.vec3_Index(self, _i)

    def barelyEqual(self, _v):
        return _libsimpa.vec3_barelyEqual(self, _v)

    def set(self, _x, _y, _z):
        return _libsimpa.vec3_set(self, _x, _y, _z)

    def reset(self):
        return _libsimpa.vec3_reset(self)

    def length(self):
        return _libsimpa.vec3_length(self)

    def normalize(self):
        return _libsimpa.vec3_normalize(self)

    def cross(self, *args):
        return _libsimpa.vec3_cross(self, *args)

    def cosinus(self, ac):
        return _libsimpa.vec3_cosinus(self, ac)

    def dot(self, v):
        return _libsimpa.vec3_dot(self, v)

    def compare(self, *args):
        return _libsimpa.vec3_compare(self, *args)

    def angle(self, v):
        return _libsimpa.vec3_angle(self, v)

    def closestPointOnLine(self, vA, vB):
        return _libsimpa.vec3_closestPointOnLine(self, vA, vB)

    def closestPointOnSegment(self, vA, vB):
        return _libsimpa.vec3_closestPointOnSegment(self, vA, vB)

    def projectionOnLine(self, vA, vB):
        return _libsimpa.vec3_projectionOnLine(self, vA, vB)

    def lerp(self, u, v, factor):
        return _libsimpa.vec3_lerp(self, u, v, factor)

    def distance(self, a_vector):
        return _libsimpa.vec3_distance(self, a_vector)

    def Rotation(self, n, angle):
        return _libsimpa.vec3_Rotation(self, n, angle)

    def __getitem__(self, i):
        return _libsimpa.vec3___getitem__(self, i)

    def __len__(self):
        return _libsimpa.vec3___len__(self)

    def __repr__(self):
      return "[%f,%f,%f]" % (self[0],self[1],self[2])

    __swig_destroy__ = _libsimpa.delete_vec3

# Register vec3 in _libsimpa:
_libsimpa.vec3_swigregister(vec3)

class dvec3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsimpa.dvec3_swiginit(self, _libsimpa.new_dvec3(*args))

    def __eq__(self, _v):
        return _libsimpa.dvec3___eq__(self, _v)

    def __ne__(self, _v):
        return _libsimpa.dvec3___ne__(self, _v)

    def __truediv__(self, *args):
        return _libsimpa.dvec3___truediv__(self, *args)
    __div__ = __truediv__



    def __add__(self, _v):
        return _libsimpa.dvec3___add__(self, _v)

    def __neg__(self):
        return _libsimpa.dvec3___neg__(self)

    def __sub__(self, _v):
        return _libsimpa.dvec3___sub__(self, _v)

    def __imul__(self, _f):
        return _libsimpa.dvec3___imul__(self, _f)

    def __itruediv__(self, *args):
        return _libsimpa.dvec3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, _v):
        return _libsimpa.dvec3___iadd__(self, _v)

    def __isub__(self, _v):
        return _libsimpa.dvec3___isub__(self, _v)

    def __mul__(self, *args):
        return _libsimpa.dvec3___mul__(self, *args)

    def copyTo(self, arr):
        return _libsimpa.dvec3_copyTo(self, arr)

    def Index(self, _i):
        return _libsimpa.dvec3_Index(self, _i)

    def barelyEqual(self, _v):
        return _libsimpa.dvec3_barelyEqual(self, _v)

    def set(self, _x, _y, _z):
        return _libsimpa.dvec3_set(self, _x, _y, _z)

    def reset(self):
        return _libsimpa.dvec3_reset(self)

    def length(self):
        return _libsimpa.dvec3_length(self)

    def normalize(self):
        return _libsimpa.dvec3_normalize(self)

    def cross(self, *args):
        return _libsimpa.dvec3_cross(self, *args)

    def cosinus(self, ac):
        return _libsimpa.dvec3_cosinus(self, ac)

    def dot(self, v):
        return _libsimpa.dvec3_dot(self, v)

    def compare(self, *args):
        return _libsimpa.dvec3_compare(self, *args)

    def angle(self, v):
        return _libsimpa.dvec3_angle(self, v)

    def closestPointOnLine(self, vA, vB):
        return _libsimpa.dvec3_closestPointOnLine(self, vA, vB)

    def closestPointOnSegment(self, vA, vB):
        return _libsimpa.dvec3_closestPointOnSegment(self, vA, vB)

    def projectionOnLine(self, vA, vB):
        return _libsimpa.dvec3_projectionOnLine(self, vA, vB)

    def lerp(self, u, v, factor):
        return _libsimpa.dvec3_lerp(self, u, v, factor)

    def distance(self, a_vector):
        return _libsimpa.dvec3_distance(self, a_vector)

    def Rotation(self, n, angle):
        return _libsimpa.dvec3_Rotation(self, n, angle)

    def __getitem__(self, i):
        return _libsimpa.dvec3___getitem__(self, i)

    def __len__(self):
        return _libsimpa.dvec3___len__(self)

    def __repr__(self):
      return "[%f,%f,%f]" % (self[0],self[1],self[2])

    __swig_destroy__ = _libsimpa.delete_dvec3

# Register dvec3 in _libsimpa:
_libsimpa.dvec3_swigregister(dvec3)

class ioFaceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsimpa.ioFaceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsimpa.ioFaceVector___nonzero__(self)

    def __bool__(self):
        return _libsimpa.ioFaceVector___bool__(self)

    def __len__(self):
        return _libsimpa.ioFaceVector___len__(self)

    def __getslice__(self, i, j):
        return _libsimpa.ioFaceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsimpa.ioFaceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsimpa.ioFaceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsimpa.ioFaceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsimpa.ioFaceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsimpa.ioFaceVector___setitem__(self, *args)

    def pop(self):
        return _libsimpa.ioFaceVector_pop(self)

    def append(self, x):
        return _libsimpa.ioFaceVector_append(self, x)

    def empty(self):
        return _libsimpa.ioFaceVector_empty(self)

    def size(self):
        return _libsimpa.ioFaceVector_size(self)

    def swap(self, v):
        return _libsimpa.ioFaceVector_swap(self, v)

    def begin(self):
        return _libsimpa.ioFaceVector_begin(self)

    def end(self):
        return _libsimpa.ioFaceVector_end(self)

    def rbegin(self):
        return _libsimpa.ioFaceVector_rbegin(self)

    def rend(self):
        return _libsimpa.ioFaceVector_rend(self)

    def clear(self):
        return _libsimpa.ioFaceVector_clear(self)

    def get_allocator(self):
        return _libsimpa.ioFaceVector_get_allocator(self)

    def pop_back(self):
        return _libsimpa.ioFaceVector_pop_back(self)

    def erase(self, *args):
        return _libsimpa.ioFaceVector_erase(self, *args)

    def __init__(self, *args):
        _libsimpa.ioFaceVector_swiginit(self, _libsimpa.new_ioFaceVector(*args))

    def push_back(self, x):
        return _libsimpa.ioFaceVector_push_back(self, x)

    def front(self):
        return _libsimpa.ioFaceVector_front(self)

    def back(self):
        return _libsimpa.ioFaceVector_back(self)

    def assign(self, n, x):
        return _libsimpa.ioFaceVector_assign(self, n, x)

    def resize(self, *args):
        return _libsimpa.ioFaceVector_resize(self, *args)

    def insert(self, *args):
        return _libsimpa.ioFaceVector_insert(self, *args)

    def reserve(self, n):
        return _libsimpa.ioFaceVector_reserve(self, n)

    def capacity(self):
        return _libsimpa.ioFaceVector_capacity(self)
    __swig_destroy__ = _libsimpa.delete_ioFaceVector

# Register ioFaceVector in _libsimpa:
_libsimpa.ioFaceVector_swigregister(ioFaceVector)

class t_posVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsimpa.t_posVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsimpa.t_posVector___nonzero__(self)

    def __bool__(self):
        return _libsimpa.t_posVector___bool__(self)

    def __len__(self):
        return _libsimpa.t_posVector___len__(self)

    def __getslice__(self, i, j):
        return _libsimpa.t_posVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsimpa.t_posVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsimpa.t_posVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsimpa.t_posVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsimpa.t_posVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsimpa.t_posVector___setitem__(self, *args)

    def pop(self):
        return _libsimpa.t_posVector_pop(self)

    def append(self, x):
        return _libsimpa.t_posVector_append(self, x)

    def empty(self):
        return _libsimpa.t_posVector_empty(self)

    def size(self):
        return _libsimpa.t_posVector_size(self)

    def swap(self, v):
        return _libsimpa.t_posVector_swap(self, v)

    def begin(self):
        return _libsimpa.t_posVector_begin(self)

    def end(self):
        return _libsimpa.t_posVector_end(self)

    def rbegin(self):
        return _libsimpa.t_posVector_rbegin(self)

    def rend(self):
        return _libsimpa.t_posVector_rend(self)

    def clear(self):
        return _libsimpa.t_posVector_clear(self)

    def get_allocator(self):
        return _libsimpa.t_posVector_get_allocator(self)

    def pop_back(self):
        return _libsimpa.t_posVector_pop_back(self)

    def erase(self, *args):
        return _libsimpa.t_posVector_erase(self, *args)

    def __init__(self, *args):
        _libsimpa.t_posVector_swiginit(self, _libsimpa.new_t_posVector(*args))

    def push_back(self, x):
        return _libsimpa.t_posVector_push_back(self, x)

    def front(self):
        return _libsimpa.t_posVector_front(self)

    def back(self):
        return _libsimpa.t_posVector_back(self)

    def assign(self, n, x):
        return _libsimpa.t_posVector_assign(self, n, x)

    def resize(self, *args):
        return _libsimpa.t_posVector_resize(self, *args)

    def insert(self, *args):
        return _libsimpa.t_posVector_insert(self, *args)

    def reserve(self, n):
        return _libsimpa.t_posVector_reserve(self, n)

    def capacity(self):
        return _libsimpa.t_posVector_capacity(self)
    __swig_destroy__ = _libsimpa.delete_t_posVector

# Register t_posVector in _libsimpa:
_libsimpa.t_posVector_swigregister(t_posVector)

class bintetrahedreVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsimpa.bintetrahedreVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsimpa.bintetrahedreVector___nonzero__(self)

    def __bool__(self):
        return _libsimpa.bintetrahedreVector___bool__(self)

    def __len__(self):
        return _libsimpa.bintetrahedreVector___len__(self)

    def __getslice__(self, i, j):
        return _libsimpa.bintetrahedreVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsimpa.bintetrahedreVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsimpa.bintetrahedreVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsimpa.bintetrahedreVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsimpa.bintetrahedreVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsimpa.bintetrahedreVector___setitem__(self, *args)

    def pop(self):
        return _libsimpa.bintetrahedreVector_pop(self)

    def append(self, x):
        return _libsimpa.bintetrahedreVector_append(self, x)

    def empty(self):
        return _libsimpa.bintetrahedreVector_empty(self)

    def size(self):
        return _libsimpa.bintetrahedreVector_size(self)

    def swap(self, v):
        return _libsimpa.bintetrahedreVector_swap(self, v)

    def begin(self):
        return _libsimpa.bintetrahedreVector_begin(self)

    def end(self):
        return _libsimpa.bintetrahedreVector_end(self)

    def rbegin(self):
        return _libsimpa.bintetrahedreVector_rbegin(self)

    def rend(self):
        return _libsimpa.bintetrahedreVector_rend(self)

    def clear(self):
        return _libsimpa.bintetrahedreVector_clear(self)

    def get_allocator(self):
        return _libsimpa.bintetrahedreVector_get_allocator(self)

    def pop_back(self):
        return _libsimpa.bintetrahedreVector_pop_back(self)

    def erase(self, *args):
        return _libsimpa.bintetrahedreVector_erase(self, *args)

    def __init__(self, *args):
        _libsimpa.bintetrahedreVector_swiginit(self, _libsimpa.new_bintetrahedreVector(*args))

    def push_back(self, x):
        return _libsimpa.bintetrahedreVector_push_back(self, x)

    def front(self):
        return _libsimpa.bintetrahedreVector_front(self)

    def back(self):
        return _libsimpa.bintetrahedreVector_back(self)

    def assign(self, n, x):
        return _libsimpa.bintetrahedreVector_assign(self, n, x)

    def resize(self, *args):
        return _libsimpa.bintetrahedreVector_resize(self, *args)

    def insert(self, *args):
        return _libsimpa.bintetrahedreVector_insert(self, *args)

    def reserve(self, n):
        return _libsimpa.bintetrahedreVector_reserve(self, n)

    def capacity(self):
        return _libsimpa.bintetrahedreVector_capacity(self)
    __swig_destroy__ = _libsimpa.delete_bintetrahedreVector

# Register bintetrahedreVector in _libsimpa:
_libsimpa.bintetrahedreVector_swigregister(bintetrahedreVector)

class t_binNodeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsimpa.t_binNodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsimpa.t_binNodeVector___nonzero__(self)

    def __bool__(self):
        return _libsimpa.t_binNodeVector___bool__(self)

    def __len__(self):
        return _libsimpa.t_binNodeVector___len__(self)

    def __getslice__(self, i, j):
        return _libsimpa.t_binNodeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsimpa.t_binNodeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsimpa.t_binNodeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsimpa.t_binNodeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsimpa.t_binNodeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsimpa.t_binNodeVector___setitem__(self, *args)

    def pop(self):
        return _libsimpa.t_binNodeVector_pop(self)

    def append(self, x):
        return _libsimpa.t_binNodeVector_append(self, x)

    def empty(self):
        return _libsimpa.t_binNodeVector_empty(self)

    def size(self):
        return _libsimpa.t_binNodeVector_size(self)

    def swap(self, v):
        return _libsimpa.t_binNodeVector_swap(self, v)

    def begin(self):
        return _libsimpa.t_binNodeVector_begin(self)

    def end(self):
        return _libsimpa.t_binNodeVector_end(self)

    def rbegin(self):
        return _libsimpa.t_binNodeVector_rbegin(self)

    def rend(self):
        return _libsimpa.t_binNodeVector_rend(self)

    def clear(self):
        return _libsimpa.t_binNodeVector_clear(self)

    def get_allocator(self):
        return _libsimpa.t_binNodeVector_get_allocator(self)

    def pop_back(self):
        return _libsimpa.t_binNodeVector_pop_back(self)

    def erase(self, *args):
        return _libsimpa.t_binNodeVector_erase(self, *args)

    def __init__(self, *args):
        _libsimpa.t_binNodeVector_swiginit(self, _libsimpa.new_t_binNodeVector(*args))

    def push_back(self, x):
        return _libsimpa.t_binNodeVector_push_back(self, x)

    def front(self):
        return _libsimpa.t_binNodeVector_front(self)

    def back(self):
        return _libsimpa.t_binNodeVector_back(self)

    def assign(self, n, x):
        return _libsimpa.t_binNodeVector_assign(self, n, x)

    def resize(self, *args):
        return _libsimpa.t_binNodeVector_resize(self, *args)

    def insert(self, *args):
        return _libsimpa.t_binNodeVector_insert(self, *args)

    def reserve(self, n):
        return _libsimpa.t_binNodeVector_reserve(self, n)

    def capacity(self):
        return _libsimpa.t_binNodeVector_capacity(self)
    __swig_destroy__ = _libsimpa.delete_t_binNodeVector

# Register t_binNodeVector in _libsimpa:
_libsimpa.t_binNodeVector_swigregister(t_binNodeVector)

class stringarray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsimpa.stringarray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsimpa.stringarray___nonzero__(self)

    def __bool__(self):
        return _libsimpa.stringarray___bool__(self)

    def __len__(self):
        return _libsimpa.stringarray___len__(self)

    def __getslice__(self, i, j):
        return _libsimpa.stringarray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsimpa.stringarray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsimpa.stringarray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsimpa.stringarray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsimpa.stringarray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsimpa.stringarray___setitem__(self, *args)

    def pop(self):
        return _libsimpa.stringarray_pop(self)

    def append(self, x):
        _x = x.decode('utf-8')
        return _libsimpa.stringarray_append(self, _x)

    def empty(self):
        return _libsimpa.stringarray_empty(self)

    def size(self):
        return _libsimpa.stringarray_size(self)

    def swap(self, v):
        return _libsimpa.stringarray_swap(self, v)

    def begin(self):
        return _libsimpa.stringarray_begin(self)

    def end(self):
        return _libsimpa.stringarray_end(self)

    def rbegin(self):
        return _libsimpa.stringarray_rbegin(self)

    def rend(self):
        return _libsimpa.stringarray_rend(self)

    def clear(self):
        return _libsimpa.stringarray_clear(self)

    def get_allocator(self):
        return _libsimpa.stringarray_get_allocator(self)

    def pop_back(self):
        return _libsimpa.stringarray_pop_back(self)

    def erase(self, *args):
        return _libsimpa.stringarray_erase(self, *args)

    def __init__(self, *args):
        _libsimpa.stringarray_swiginit(self, _libsimpa.new_stringarray(*args))

    def push_back(self, x):
        return _libsimpa.stringarray_push_back(self, x)

    def front(self):
        return _libsimpa.stringarray_front(self)

    def back(self):
        return _libsimpa.stringarray_back(self)

    def assign(self, n, x):
        return _libsimpa.stringarray_assign(self, n, x)

    def resize(self, *args):
        return _libsimpa.stringarray_resize(self, *args)

    def insert(self, *args):
        return _libsimpa.stringarray_insert(self, *args)

    def reserve(self, n):
        return _libsimpa.stringarray_reserve(self, n)

    def capacity(self):
        return _libsimpa.stringarray_capacity(self)
    __swig_destroy__ = _libsimpa.delete_stringarray

# Register stringarray in _libsimpa:
_libsimpa.stringarray_swigregister(stringarray)

class intarray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsimpa.intarray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsimpa.intarray___nonzero__(self)

    def __bool__(self):
        return _libsimpa.intarray___bool__(self)

    def __len__(self):
        return _libsimpa.intarray___len__(self)

    def __getslice__(self, i, j):
        return _libsimpa.intarray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsimpa.intarray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsimpa.intarray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsimpa.intarray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsimpa.intarray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsimpa.intarray___setitem__(self, *args)

    def pop(self):
        return _libsimpa.intarray_pop(self)

    def append(self, x):
        return _libsimpa.intarray_append(self, x)

    def empty(self):
        return _libsimpa.intarray_empty(self)

    def size(self):
        return _libsimpa.intarray_size(self)

    def swap(self, v):
        return _libsimpa.intarray_swap(self, v)

    def begin(self):
        return _libsimpa.intarray_begin(self)

    def end(self):
        return _libsimpa.intarray_end(self)

    def rbegin(self):
        return _libsimpa.intarray_rbegin(self)

    def rend(self):
        return _libsimpa.intarray_rend(self)

    def clear(self):
        return _libsimpa.intarray_clear(self)

    def get_allocator(self):
        return _libsimpa.intarray_get_allocator(self)

    def pop_back(self):
        return _libsimpa.intarray_pop_back(self)

    def erase(self, *args):
        return _libsimpa.intarray_erase(self, *args)

    def __init__(self, *args):
        _libsimpa.intarray_swiginit(self, _libsimpa.new_intarray(*args))

    def push_back(self, x):
        return _libsimpa.intarray_push_back(self, x)

    def front(self):
        return _libsimpa.intarray_front(self)

    def back(self):
        return _libsimpa.intarray_back(self)

    def assign(self, n, x):
        return _libsimpa.intarray_assign(self, n, x)

    def resize(self, *args):
        return _libsimpa.intarray_resize(self, *args)

    def insert(self, *args):
        return _libsimpa.intarray_insert(self, *args)

    def reserve(self, n):
        return _libsimpa.intarray_reserve(self, n)

    def capacity(self):
        return _libsimpa.intarray_capacity(self)
    __swig_destroy__ = _libsimpa.delete_intarray

# Register intarray in _libsimpa:
_libsimpa.intarray_swigregister(intarray)

class floatarray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsimpa.floatarray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsimpa.floatarray___nonzero__(self)

    def __bool__(self):
        return _libsimpa.floatarray___bool__(self)

    def __len__(self):
        return _libsimpa.floatarray___len__(self)

    def __getslice__(self, i, j):
        return _libsimpa.floatarray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsimpa.floatarray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsimpa.floatarray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsimpa.floatarray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsimpa.floatarray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsimpa.floatarray___setitem__(self, *args)

    def pop(self):
        return _libsimpa.floatarray_pop(self)

    def append(self, x):
        return _libsimpa.floatarray_append(self, x)

    def empty(self):
        return _libsimpa.floatarray_empty(self)

    def size(self):
        return _libsimpa.floatarray_size(self)

    def swap(self, v):
        return _libsimpa.floatarray_swap(self, v)

    def begin(self):
        return _libsimpa.floatarray_begin(self)

    def end(self):
        return _libsimpa.floatarray_end(self)

    def rbegin(self):
        return _libsimpa.floatarray_rbegin(self)

    def rend(self):
        return _libsimpa.floatarray_rend(self)

    def clear(self):
        return _libsimpa.floatarray_clear(self)

    def get_allocator(self):
        return _libsimpa.floatarray_get_allocator(self)

    def pop_back(self):
        return _libsimpa.floatarray_pop_back(self)

    def erase(self, *args):
        return _libsimpa.floatarray_erase(self, *args)

    def __init__(self, *args):
        _libsimpa.floatarray_swiginit(self, _libsimpa.new_floatarray(*args))

    def push_back(self, x):
        return _libsimpa.floatarray_push_back(self, x)

    def front(self):
        return _libsimpa.floatarray_front(self)

    def back(self):
        return _libsimpa.floatarray_back(self)

    def assign(self, n, x):
        return _libsimpa.floatarray_assign(self, n, x)

    def resize(self, *args):
        return _libsimpa.floatarray_resize(self, *args)

    def insert(self, *args):
        return _libsimpa.floatarray_insert(self, *args)

    def reserve(self, n):
        return _libsimpa.floatarray_reserve(self, n)

    def capacity(self):
        return _libsimpa.floatarray_capacity(self)
    __swig_destroy__ = _libsimpa.delete_floatarray

# Register floatarray in _libsimpa:
_libsimpa.floatarray_swigregister(floatarray)

class typearray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsimpa.typearray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsimpa.typearray___nonzero__(self)

    def __bool__(self):
        return _libsimpa.typearray___bool__(self)

    def __len__(self):
        return _libsimpa.typearray___len__(self)

    def __getslice__(self, i, j):
        return _libsimpa.typearray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsimpa.typearray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsimpa.typearray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsimpa.typearray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsimpa.typearray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsimpa.typearray___setitem__(self, *args)

    def pop(self):
        return _libsimpa.typearray_pop(self)

    def append(self, x):
        return _libsimpa.typearray_append(self, x)

    def empty(self):
        return _libsimpa.typearray_empty(self)

    def size(self):
        return _libsimpa.typearray_size(self)

    def swap(self, v):
        return _libsimpa.typearray_swap(self, v)

    def begin(self):
        return _libsimpa.typearray_begin(self)

    def end(self):
        return _libsimpa.typearray_end(self)

    def rbegin(self):
        return _libsimpa.typearray_rbegin(self)

    def rend(self):
        return _libsimpa.typearray_rend(self)

    def clear(self):
        return _libsimpa.typearray_clear(self)

    def get_allocator(self):
        return _libsimpa.typearray_get_allocator(self)

    def pop_back(self):
        return _libsimpa.typearray_pop_back(self)

    def erase(self, *args):
        return _libsimpa.typearray_erase(self, *args)

    def __init__(self, *args):
        _libsimpa.typearray_swiginit(self, _libsimpa.new_typearray(*args))

    def push_back(self, x):
        return _libsimpa.typearray_push_back(self, x)

    def front(self):
        return _libsimpa.typearray_front(self)

    def back(self):
        return _libsimpa.typearray_back(self)

    def assign(self, n, x):
        return _libsimpa.typearray_assign(self, n, x)

    def resize(self, *args):
        return _libsimpa.typearray_resize(self, *args)

    def insert(self, *args):
        return _libsimpa.typearray_insert(self, *args)

    def reserve(self, n):
        return _libsimpa.typearray_reserve(self, n)

    def capacity(self):
        return _libsimpa.typearray_capacity(self)
    __swig_destroy__ = _libsimpa.delete_typearray

# Register typearray in _libsimpa:
_libsimpa.typearray_swigregister(typearray)

class polyFaceList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsimpa.polyFaceList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsimpa.polyFaceList___nonzero__(self)

    def __bool__(self):
        return _libsimpa.polyFaceList___bool__(self)

    def __len__(self):
        return _libsimpa.polyFaceList___len__(self)

    def __getslice__(self, i, j):
        return _libsimpa.polyFaceList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsimpa.polyFaceList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsimpa.polyFaceList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsimpa.polyFaceList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsimpa.polyFaceList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsimpa.polyFaceList___setitem__(self, *args)

    def pop(self):
        return _libsimpa.polyFaceList_pop(self)

    def append(self, x):
        return _libsimpa.polyFaceList_append(self, x)

    def empty(self):
        return _libsimpa.polyFaceList_empty(self)

    def size(self):
        return _libsimpa.polyFaceList_size(self)

    def swap(self, v):
        return _libsimpa.polyFaceList_swap(self, v)

    def begin(self):
        return _libsimpa.polyFaceList_begin(self)

    def end(self):
        return _libsimpa.polyFaceList_end(self)

    def rbegin(self):
        return _libsimpa.polyFaceList_rbegin(self)

    def rend(self):
        return _libsimpa.polyFaceList_rend(self)

    def clear(self):
        return _libsimpa.polyFaceList_clear(self)

    def get_allocator(self):
        return _libsimpa.polyFaceList_get_allocator(self)

    def pop_back(self):
        return _libsimpa.polyFaceList_pop_back(self)

    def erase(self, *args):
        return _libsimpa.polyFaceList_erase(self, *args)

    def __init__(self, *args):
        _libsimpa.polyFaceList_swiginit(self, _libsimpa.new_polyFaceList(*args))

    def push_back(self, x):
        return _libsimpa.polyFaceList_push_back(self, x)

    def front(self):
        return _libsimpa.polyFaceList_front(self)

    def back(self):
        return _libsimpa.polyFaceList_back(self)

    def assign(self, n, x):
        return _libsimpa.polyFaceList_assign(self, n, x)

    def resize(self, *args):
        return _libsimpa.polyFaceList_resize(self, *args)

    def insert(self, *args):
        return _libsimpa.polyFaceList_insert(self, *args)

    def reserve(self, n):
        return _libsimpa.polyFaceList_reserve(self, n)

    def capacity(self):
        return _libsimpa.polyFaceList_capacity(self)
    __swig_destroy__ = _libsimpa.delete_polyFaceList

# Register polyFaceList in _libsimpa:
_libsimpa.polyFaceList_swigregister(polyFaceList)

class polyRegionList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsimpa.polyRegionList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsimpa.polyRegionList___nonzero__(self)

    def __bool__(self):
        return _libsimpa.polyRegionList___bool__(self)

    def __len__(self):
        return _libsimpa.polyRegionList___len__(self)

    def __getslice__(self, i, j):
        return _libsimpa.polyRegionList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsimpa.polyRegionList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsimpa.polyRegionList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsimpa.polyRegionList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsimpa.polyRegionList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsimpa.polyRegionList___setitem__(self, *args)

    def pop(self):
        return _libsimpa.polyRegionList_pop(self)

    def append(self, x):
        return _libsimpa.polyRegionList_append(self, x)

    def empty(self):
        return _libsimpa.polyRegionList_empty(self)

    def size(self):
        return _libsimpa.polyRegionList_size(self)

    def swap(self, v):
        return _libsimpa.polyRegionList_swap(self, v)

    def begin(self):
        return _libsimpa.polyRegionList_begin(self)

    def end(self):
        return _libsimpa.polyRegionList_end(self)

    def rbegin(self):
        return _libsimpa.polyRegionList_rbegin(self)

    def rend(self):
        return _libsimpa.polyRegionList_rend(self)

    def clear(self):
        return _libsimpa.polyRegionList_clear(self)

    def get_allocator(self):
        return _libsimpa.polyRegionList_get_allocator(self)

    def pop_back(self):
        return _libsimpa.polyRegionList_pop_back(self)

    def erase(self, *args):
        return _libsimpa.polyRegionList_erase(self, *args)

    def __init__(self, *args):
        _libsimpa.polyRegionList_swiginit(self, _libsimpa.new_polyRegionList(*args))

    def push_back(self, x):
        return _libsimpa.polyRegionList_push_back(self, x)

    def front(self):
        return _libsimpa.polyRegionList_front(self)

    def back(self):
        return _libsimpa.polyRegionList_back(self)

    def assign(self, n, x):
        return _libsimpa.polyRegionList_assign(self, n, x)

    def resize(self, *args):
        return _libsimpa.polyRegionList_resize(self, *args)

    def insert(self, *args):
        return _libsimpa.polyRegionList_insert(self, *args)

    def reserve(self, n):
        return _libsimpa.polyRegionList_reserve(self, n)

    def capacity(self):
        return _libsimpa.polyRegionList_capacity(self)
    __swig_destroy__ = _libsimpa.delete_polyRegionList

# Register polyRegionList in _libsimpa:
_libsimpa.polyRegionList_swigregister(polyRegionList)

class dvec3List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsimpa.dvec3List_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsimpa.dvec3List___nonzero__(self)

    def __bool__(self):
        return _libsimpa.dvec3List___bool__(self)

    def __len__(self):
        return _libsimpa.dvec3List___len__(self)

    def __getslice__(self, i, j):
        return _libsimpa.dvec3List___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsimpa.dvec3List___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsimpa.dvec3List___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsimpa.dvec3List___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsimpa.dvec3List___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsimpa.dvec3List___setitem__(self, *args)

    def pop(self):
        return _libsimpa.dvec3List_pop(self)

    def append(self, x):
        return _libsimpa.dvec3List_append(self, x)

    def empty(self):
        return _libsimpa.dvec3List_empty(self)

    def size(self):
        return _libsimpa.dvec3List_size(self)

    def swap(self, v):
        return _libsimpa.dvec3List_swap(self, v)

    def begin(self):
        return _libsimpa.dvec3List_begin(self)

    def end(self):
        return _libsimpa.dvec3List_end(self)

    def rbegin(self):
        return _libsimpa.dvec3List_rbegin(self)

    def rend(self):
        return _libsimpa.dvec3List_rend(self)

    def clear(self):
        return _libsimpa.dvec3List_clear(self)

    def get_allocator(self):
        return _libsimpa.dvec3List_get_allocator(self)

    def pop_back(self):
        return _libsimpa.dvec3List_pop_back(self)

    def erase(self, *args):
        return _libsimpa.dvec3List_erase(self, *args)

    def __init__(self, *args):
        _libsimpa.dvec3List_swiginit(self, _libsimpa.new_dvec3List(*args))

    def push_back(self, x):
        return _libsimpa.dvec3List_push_back(self, x)

    def front(self):
        return _libsimpa.dvec3List_front(self)

    def back(self):
        return _libsimpa.dvec3List_back(self)

    def assign(self, n, x):
        return _libsimpa.dvec3List_assign(self, n, x)

    def resize(self, *args):
        return _libsimpa.dvec3List_resize(self, *args)

    def insert(self, *args):
        return _libsimpa.dvec3List_insert(self, *args)

    def reserve(self, n):
        return _libsimpa.dvec3List_reserve(self, n)

    def capacity(self):
        return _libsimpa.dvec3List_capacity(self)
    __swig_destroy__ = _libsimpa.delete_dvec3List

# Register dvec3List in _libsimpa:
_libsimpa.dvec3List_swigregister(dvec3List)



